<h2>Paginación Básica - Carga de datos con Fetch</h2>
<p id="tiempoCarga"></p>

<table class="table table-striped" id="clientesTable">
    <thead>
        <tr>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Dirección</th>
            <th>Email</th>
            <th>Fecha de Nacimiento</th>
            <th>Fecha de Creación</th>
            <th>Empresa</th>
        </tr>
    </thead>
    <tbody id="clientesBody">
        <!-- Aquí se insertarán los datos con JavaScript -->
    </tbody>
</table>

<!-- Paginación centrada con Bootstrap -->
<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center" id="pagination">
        <!-- Aquí se generarán los botones de paginación con JavaScript -->
    </ul>
</nav>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const rowsPerPage = 10; // Número de registros por página
        let clientes = []; // Arreglo donde se almacenarán los clientes
        let currentPage = 1; // Página actual
        let totalPages = 1; // Total de páginas

        const loadData = async () => {
            const startFetch = performance.now(); // Inicia el cronómetro para medir el tiempo
            const response = await fetch('/Home/ObtenerClientes'); // Petición al endpoint
            clientes = await response.json(); // Cargar clientes

            totalPages = Math.ceil(clientes.length / rowsPerPage); // Calcular total de páginas
            const endFetch = performance.now(); // Termina el cronómetro

            // Mostrar tiempo de carga
            document.getElementById('tiempoCarga').innerText = `Tiempo de carga: ${(endFetch - startFetch).toFixed(2)} ms`;

            // Mostrar la primera página
            displayPage(1);
        };

        function displayPage(page) {
            currentPage = page;

            // Limpiar las filas actuales
            const clientesBody = document.getElementById('clientesBody');
            clientesBody.innerHTML = '';

            // Mostrar solo los registros correspondientes a la página actual
            const start = (page - 1) * rowsPerPage;
            const end = start + rowsPerPage;
            for (let i = start; i < end && i < clientes.length; i++) {
                const cliente = clientes[i];
                const row = `<tr>
                                    <td>${cliente.nombre}</td>
                                    <td>${cliente.apellido}</td>
                                    <td>${cliente.direccion}</td>
                                    <td>${cliente.email}</td>
                                    <td>${new Date(cliente.fechaNacimiento).toLocaleDateString()}</td>
                                    <td>${new Date(cliente.fechaCreacion).toLocaleDateString()}</td>
                                    <td>${cliente.empresa}</td>
                                 </tr>`;
                clientesBody.insertAdjacentHTML('beforeend', row);
            }

            // Actualizar paginación
            updatePagination();
        }

        function updatePagination() {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = ''; // Limpiar botones de paginación

            // Botón "Primera página" (<<)
            const firstPageButton = document.createElement('li');
            firstPageButton.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            firstPageButton.innerHTML = `<a class="page-link" href="#" aria-label="First"><<</a>`;
            firstPageButton.addEventListener('click', () => displayPage(1));
            pagination.appendChild(firstPageButton);

            // Botón "Página anterior" (<)
            const prevPageButton = document.createElement('li');
            prevPageButton.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevPageButton.innerHTML = `<a class="page-link" href="#" aria-label="Previous"><</a>`;
            prevPageButton.addEventListener('click', () => displayPage(currentPage - 1));
            pagination.appendChild(prevPageButton);

            // Botones numéricos
            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, currentPage + 2);

            for (let i = startPage; i <= endPage; i++) {
                const pageButton = document.createElement('li');
                pageButton.className = `page-item ${currentPage === i ? 'active' : ''}`;
                pageButton.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                pageButton.addEventListener('click', () => displayPage(i));
                pagination.appendChild(pageButton);
            }

            // Botón "Siguiente página" (>)
            const nextPageButton = document.createElement('li');
            nextPageButton.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextPageButton.innerHTML = `<a class="page-link" href="#" aria-label="Next">></a>`;
            nextPageButton.addEventListener('click', () => displayPage(currentPage + 1));
            pagination.appendChild(nextPageButton);

            // Botón "Última página" (>>)
            const lastPageButton = document.createElement('li');
            lastPageButton.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            lastPageButton.innerHTML = `<a class="page-link" href="#" aria-label="Last">>></a>`;
            lastPageButton.addEventListener('click', () => displayPage(totalPages));
            pagination.appendChild(lastPageButton);
        }

        // Cargar los datos al cargar la página
        loadData();
    });
</script>
