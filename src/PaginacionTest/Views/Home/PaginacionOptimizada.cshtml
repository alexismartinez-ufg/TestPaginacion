@using LlenadoDataFake
@model IEnumerable<Cliente>

<h2>Paginación Optimizada - EF Core (Skip, Take)</h2>
<p>Tiempo de carga: @ViewBag.TiempoCarga ms</p>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Dirección</th>
            <th>Email</th>
            <th>Fecha de Nacimiento</th>
            <th>Fecha de Creación</th>
            <th>Empresa</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var cliente in Model)
        {
            <tr>
                <td>@cliente.Nombre</td>
                <td>@cliente.Apellido</td>
                <td>@cliente.Direccion</td>
                <td>@cliente.Email</td>
                <td>@cliente.FechaNacimiento.ToShortDateString()</td>
                <td>@cliente.FechaCreacion.ToShortDateString()</td>
                <td>@cliente.Empresa</td>
            </tr>
        }
    </tbody>
</table>

<!-- Navegación de paginación -->
@{
    int maxLinks = 5; // Número máximo de botones a mostrar
    int paginaActual = ViewBag.PaginaActual;
    int totalPaginas = ViewBag.TotalPaginas;
    int inicio = Math.Max(1, paginaActual - (maxLinks / 2));
    int fin = Math.Min(totalPaginas, paginaActual + (maxLinks / 2));

    if (fin - inicio < maxLinks && inicio > 1)
    {
        inicio = Math.Max(1, inicio - (maxLinks - (fin - inicio)));
    }

    if (fin - inicio < maxLinks && fin < totalPaginas)
    {
        fin = Math.Min(totalPaginas, fin + (maxLinks - (fin - inicio)));
    }
}

<!-- Paginación centrada con Bootstrap -->
<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        <!-- Primer botón (<<) -->
        <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"].ToString(), new { pagina = 1 })" aria-label="First">
                <<
            </a>
        </li>

        <!-- Botón Anterior (<) -->
        <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"].ToString(), new { pagina = paginaActual - 1 })" aria-label="Previous">
                <
            </a>
        </li>

        <!-- Botones numéricos -->
        @for (int i = inicio; i <= fin; i++)
        {
            <li class="page-item @(paginaActual == i ? "active" : "")">
                <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"].ToString(), new { pagina = i })">@i</a>
            </li>
        }

        <!-- Botón Siguiente (>) -->
        <li class="page-item @(paginaActual == totalPaginas ? "disabled" : "")">
            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"].ToString(), new { pagina = paginaActual + 1 })" aria-label="Next">
                >
            </a>
        </li>

        <!-- Último botón (>>) -->
        <li class="page-item @(paginaActual == totalPaginas ? "disabled" : "")">
            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"].ToString(), new { pagina = totalPaginas })" aria-label="Last">
                >>
            </a>
        </li>
    </ul>
</nav>

